#ip 5
label init:
00 addi 5 16 5 | R5 + 16 -> R5 | IP += 16   jmp l1              goto l1
01 seti 1 2 2 | 1 -> R2 | R2 = 1            R2 = 1              R2 = 1
label l2:
02 seti 1 0 4 | 1 -> R4 | R4 = 1            R4 = 1              R4 = 1
label l3:
03 mulr 2 4 3 | R2 * R4->R3 | R3 = R2 * R4  R3 = R2 * R4
04 eqrr 3 1 3 | R3 == R1 -> R3 | ...        R3 == R1            if (R2 * R4) == R1 then R0 += R2
05 addr 3 5 5 | R3 + R5 -> R5 | IP += R3    jmpr R3 (0 or 1)
06 addi 5 1 5 | R5 + 1 -> R5 | IP +=1       jmpr +1
07 addr 2 0 0 | R2 + R0 -> R0 | R0 += R2    R0 += R2
08 addi 4 1 4 | R4 + 1 -> R4 | inc R4       R4 += 1             inc R4
09 gtrr 4 1 3 | R4 > R1 -> R3 | ...                             if R4 < R1 then goto l3
10 addr 5 3 5 | R5 + R3 -> R5 | IP += R3    jmpr R3 (0 or 1)
11 seti 2 4 5 | 2 -> R5 | IP = 2            jmp l3
12 addi 2 1 2 | R2 + 1 -> R2 | R2 += 1                          inc R2
13 gtrr 2 1 3 | R2 > R1 -> R3 | ...                             if R2 > R1 then exit else goto l2
14 addr 3 5 5 | R3 + R5 -> R5 | IP += R3    jmpr R3 (0 or 1)
15 seti 1 1 5 | 1 -> R5 | R5 = 1            jmp l2
16 mulr 5 5 5 | R5 * R5 -> R5 | IP *= IP    jmp 256 -> exit
label l1
17 addi 1 2 1 | R1 + 2 -> R1 | R1 += 2      R1 = R1 + 2
18 mulr 1 1 1 | R1 * R1 -> R1 | R1 *= R1    R1 = R1 * R1
19 mulr 5 1 1 | R5 * R1 -> R1 | R1 *= IP    R1 = R1 * 19
20 muli 1 11 1 | R1 * 11 -> R1 | R1 *= 11   R1 = R1 * 11        R1 = 836, if R1 = 0 at start
21 addi 3 6 3 | R3 + 6 -> R3 | R3 += 6      R3 = R3 + 6
22 mulr 3 5 3 | R3 * R5 -> R3 | R3 *= IP    R3 = R3 * 22
23 addi 3 15 3 | R3 + 15 -> R3 | R3 += 15   R3 = R3 + 15        R3 = 147, if R3 = 0 at start
24 addr 1 3 1 | R1 + R3 -> R1 | R1 += R3    R1 = R1 + R3        R1 = 983
25 addr 5 0 5 | R5 + R0 -> R5 | IP += R0    jmpr R0             if R0 == 0 goto init (part1)
26 seti 0 7 5 | 0 -> R5 | IP = 0            jmp init            (part2)
27 setr 5 8 3 | R5 -> R3 | R3 = IP          R3 = 27
28 mulr 3 5 3 | R3 * R5 -> R3 | R3 *= IP    R3 = R3 * 28
29 addr 5 3 3 | R5 + R3 -> R3 | R3 += IP    R3 = R3 + 29
30 mulr 5 3 3 | R5 * R3 -> R3 | R3 *= IP    R3 = R3 * 30
31 muli 3 14 3 | R3 * 14 -> R3 | R3 *= 14   R3 = R3 * 14
32 mulr 3 5 3 | R3 * R5 -> R3 | R3 *= IP    R3 = R3 * 32        R3 = 10550400
33 addr 1 3 1 | R1 + R3 -> R1 | R1 += R3    R1 = R1 + R3        R1 = 10551383
34 seti 0 0 0 | 0 -> R0 | R0 = 0            R0 = 0              start program like part 1 but different R3 and R1
35 seti 0 6 5 | 0 -> R5 | IP = 0            jmp init


while R4 < init_value:
    R4 + = 1

for r2 in range(1, value):
    for r4 in range(1, value):
        if r2 * r4 == r1:
            r0 += r2


10.551.383 no es número primo, es un número compuesto.
10551383 + 1 + 43 + 59 + 4159 + 43 * 59 + 4159 + 43 * 4159 + 59

105556

10741237 too low